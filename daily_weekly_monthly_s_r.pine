// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Amlanpatra16

//@version=5
indicator('D/W/M S/R', overlay=true, max_bars_back=500)

showlast_days = input.int(30,"How Many candles back?",minval=2)
diff_from_close_in_percentage = input.float(2,"How many % far from current latest close",minval=0)
diff_from_close = int((close*diff_from_close_in_percentage)/100)
// either this many days or difference of this much money from latest close
check_ic = input.bool(true,"Only IC Candles")
show_open = input.bool(true,"Show Open")
show_high = input.bool(true,"Show High")
show_low = input.bool(true,"Show Low")
show_close = input.bool(true,"Show Close")
bar_index_extend = input.int(3,"Extend to this many candles right",minval=-1)
tnsprency = input.int(50,"Transparency",minval=0,maxval=100)

del_lines() =>
    a_allLines = line.all
    if array.size(a_allLines) > 0
        for i = 0 to array.size(a_allLines) - 1
            line.delete(array.get(a_allLines, i))

ic(idx) =>
    res = (math.abs(open[idx] - close[idx])) <= (high[idx] - low[idx])/2 ? 1 : 0
    res



if barstate.islast
    del_lines()
    for i = showlast_days to 2    // 2 since current day and prev day ohlc are in pd_&_piv indicator
        if check_ic
            if ic(i)
                if show_open
                    if (math.abs(close - open[i]) <= diff_from_close)
                        line.new(bar_index-i, open[i], bar_index + bar_index_extend, open[i],color = color.new(color.white,tnsprency),style=line.style_dashed)

                if show_high
                    if (math.abs(close - high[i]) <= diff_from_close)
                        line.new(bar_index-i, high[i], bar_index + bar_index_extend, high[i],color = color.new(color.white,tnsprency),style=line.style_dashed)

                if show_low
                    if (math.abs(close - low[i]) <= diff_from_close)
                        line.new(bar_index-i, low[i], bar_index + bar_index_extend, low[i],color = color.new(color.white,tnsprency),style=line.style_dashed)

                if show_close
                    if (math.abs(close - close[i]) <= diff_from_close)
                        line.new(bar_index-i, close[i], bar_index + bar_index_extend, close[i],color = color.new(color.white,tnsprency),style=line.style_dashed)
                
        else
            if show_open
                if (math.abs(close - open[i]) <= diff_from_close)
                    line.new(bar_index-i, open[i], bar_index + bar_index_extend, open[i],color = color.new(color.white,tnsprency),style=line.style_dashed)

            if show_high
                if (math.abs(close - high[i]) <= diff_from_close)
                    line.new(bar_index-i, high[i], bar_index + bar_index_extend, high[i],color = color.new(color.white,tnsprency),style=line.style_dashed)

            if show_low
                if (math.abs(close - low[i]) <= diff_from_close)
                    line.new(bar_index-i, low[i], bar_index + bar_index_extend, low[i],color = color.new(color.white,tnsprency),style=line.style_dashed)

            if show_close
                if (math.abs(close - close[i]) <= diff_from_close)
                    line.new(bar_index-i, close[i], bar_index + bar_index_extend, close[i],color = color.new(color.white,tnsprency),style=line.style_dashed)

 
        

