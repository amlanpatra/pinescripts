// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Amlanpatra16

//@version=5
indicator("Piv & PD OHLC",overlay=true)//,timeframe='')

timeframe_of_piv = input.int(title="Timeframe of Piv",defval=5,minval=1)
piv_time = str.tostring(timeframe_of_piv)
show_todays_ohlc = input.bool(true, "show current day's ohlc")
show_todays_close = input.bool(false, "show current day's close")
bar_index_extend = input.int(3,"Extend to this many candles",minval=-1)
show_pivot = input.bool(true,"Show Traditional Pivot Point Lines")
// testing to be done via "test_new.pine" file
// this program gets value of traditional pivot points

prev_d_op = request.security(syminfo.ticker, "D", open[1])
prev_d_hi = request.security(syminfo.ticker, "D", high[1])
prev_d_lo = request.security(syminfo.ticker, "D", low[1])
prev_d_cl = request.security(syminfo.ticker, "D", close[1])

del_labels() =>
    a_allLabels = label.all
    if array.size(a_allLabels) > 0
        for i = 0 to array.size(a_allLabels) - 1
            label.delete(array.get(a_allLabels, i))

print(string txt) =>
    var table t = table.new(position.middle_right, 1, 1)
    table.cell(t, 0, 0, txt, bgcolor = color.yellow)

isToday(i) =>
    a = ta.change(time("D"),i) ? 1 : 0
    a
noOfBars() =>
	int counter = 0
	for i = 1 to 78
        if isToday(i)
		    counter := counter + 1
            // there are 78 5 min candles in a day
	counter := 78 - counter 
bars = noOfBars()
del_lines() =>
    a_allLines = line.all
    if array.size(a_allLines) > 0
        for i = 0 to array.size(a_allLines) - 1
            line.delete(array.get(a_allLines, i))
traditional() =>
    h = request.security(syminfo.ticker, "D", high[1])
    l = request.security(syminfo.ticker, "D", low[1])
    c = request.security(syminfo.ticker, "D", close[1])

    pivotX_Median = (h + l + c) / 3
    // print(str.tostring(h))
    p = math.round(pivotX_Median,2)
    r1 = math.round(pivotX_Median * 2 - l,2)
    s1 = math.round(pivotX_Median * 2 - h,2)
    r2 = math.round(pivotX_Median + 1 * (h - l),2)
    s2 = math.round(pivotX_Median - 1 * (h - l),2)
    r3 = math.round(pivotX_Median * 2 + (h - 2 * l),2)
    s3 = math.round(pivotX_Median * 2 - (2 * h - l),2)
    r4 = math.round(pivotX_Median * 3 + (h - 3 * l),2)
    s4 = math.round(pivotX_Median * 3 - (3 * h - l),2)
    r5 = math.round(pivotX_Median * 4 + (h - 4 * l),2)
    s5 = math.round(pivotX_Median * 4 - (4 * h - l),2)
    string result  = "r1 : " + str.tostring(r1) + "\np :" + str.tostring(p) + "\ns1 : " +  str.tostring(s1)




    // calculating the most recent pivot points
    high_current =  request.security(syminfo.ticker, "D", high[0])
    low_current =  request.security(syminfo.ticker, "D", low[0])

    high_timeframe =  request.security(syminfo.ticker, piv_time, high[0])
    low_timeframe =  request.security(syminfo.ticker, piv_time, low[0])



    pivot_sup = low_current
    pivot_sup := low_current >= s5 ? s5 : pivot_sup
    pivot_sup := low_current >= s4 ? s4 : pivot_sup
    pivot_sup := low_current >= s3 ? s3 : pivot_sup
    pivot_sup := low_current >= s2 ? s2 : pivot_sup
    pivot_sup := low_current >= s1 ? s1 : pivot_sup
    pivot_sup := low_current >= p ? p : pivot_sup
    pivot_sup := low_current >= r1 ? r1 : pivot_sup
    pivot_sup := low_current >= r2 ? r2 : pivot_sup
    pivot_sup := low_current >= r3 ? r3 : pivot_sup
    pivot_sup := low_current >= r4 ? r4 : pivot_sup
    pivot_sup := low_current >= r5 ? r5 : pivot_sup

    pivot_res = high_current
    pivot_res := high_current <= r5 ? r5 : pivot_res
    pivot_res := high_current <= r4 ? r4 : pivot_res
    pivot_res := high_current <= r3 ? r3 : pivot_res
    pivot_res := high_current <= r2 ? r2 : pivot_res
    pivot_res := high_current <= r1 ? r1 : pivot_res
    pivot_res := high_current <= p ? p : pivot_res
    pivot_res := high_current <= s1 ? s1 : pivot_res
    pivot_res := high_current <= s2 ? s2 : pivot_res
    pivot_res := high_current <= s3 ? s3 : pivot_res
    pivot_res := high_current <= s4 ? s4 : pivot_res
    pivot_res := high_current <= s5 ? s5 : pivot_res
 

    pivot_sup_timeframe = low_timeframe
    pivot_sup_timeframe := low_timeframe >= s5 ? s5 : pivot_sup_timeframe
    pivot_sup_timeframe := low_timeframe >= s4 ? s4 : pivot_sup_timeframe
    pivot_sup_timeframe := low_timeframe >= s3 ? s3 : pivot_sup_timeframe
    pivot_sup_timeframe := low_timeframe >= s2 ? s2 : pivot_sup_timeframe
    pivot_sup_timeframe := low_timeframe >= s1 ? s1 : pivot_sup_timeframe
    pivot_sup_timeframe := low_timeframe >= p ? p : pivot_sup_timeframe
    pivot_sup_timeframe := low_timeframe >= r1 ? r1 : pivot_sup_timeframe
    pivot_sup_timeframe := low_timeframe >= r2 ? r2 : pivot_sup_timeframe
    pivot_sup_timeframe := low_timeframe >= r3 ? r3 : pivot_sup_timeframe
    pivot_sup_timeframe := low_timeframe >= r4 ? r4 : pivot_sup_timeframe
    pivot_sup_timeframe := low_timeframe >= r5 ? r5 : pivot_sup_timeframe

    pivot_res_timeframe = high_timeframe
    pivot_res_timeframe := high_timeframe <= r5 ? r5 : pivot_res_timeframe
    pivot_res_timeframe := high_timeframe <= r4 ? r4 : pivot_res_timeframe
    pivot_res_timeframe := high_timeframe <= r3 ? r3 : pivot_res_timeframe
    pivot_res_timeframe := high_timeframe <= r2 ? r2 : pivot_res_timeframe
    pivot_res_timeframe := high_timeframe <= r1 ? r1 : pivot_res_timeframe
    pivot_res_timeframe := high_timeframe <= p ? p : pivot_res_timeframe
    pivot_res_timeframe := high_timeframe <= s1 ? s1 : pivot_res_timeframe
    pivot_res_timeframe := high_timeframe <= s2 ? s2 : pivot_res_timeframe
    pivot_res_timeframe := high_timeframe <= s3 ? s3 : pivot_res_timeframe
    pivot_res_timeframe := high_timeframe <= s4 ? s4 : pivot_res_timeframe
    pivot_res_timeframe := high_timeframe <= s5 ? s5 : pivot_res_timeframe


    pivot_at_point = 0.0
    pivot_at_point := (high_timeframe >= r5 and low_timeframe <= r5) ? r5 : pivot_at_point
    pivot_at_point := (high_timeframe >= r4 and low_timeframe <= r4) ? r4 : pivot_at_point
    pivot_at_point := (high_timeframe >= r3 and low_timeframe <= r3) ? r3 : pivot_at_point
    pivot_at_point := (high_timeframe >= r2 and low_timeframe <= r2) ? r2 : pivot_at_point
    pivot_at_point := (high_timeframe >= r1 and low_timeframe <= r1) ? r1 : pivot_at_point
    pivot_at_point := (high_timeframe >= p and low_timeframe <= p) ? p : pivot_at_point
    pivot_at_point := (high_timeframe >= s1 and low_timeframe <=s1) ? s1 : pivot_at_point
    pivot_at_point := (high_timeframe >= s2 and low_timeframe <= s2) ? s2 : pivot_at_point
    pivot_at_point := (high_timeframe >= s3 and low_timeframe <= s3) ? s3 : pivot_at_point
    pivot_at_point := (high_timeframe >= s4 and low_timeframe <= s4) ? s4 : pivot_at_point
    pivot_at_point := (high_timeframe >= s5 and low_timeframe <= s5) ? s5 : pivot_at_point

    [pivot_sup,pivot_res,pivot_sup_timeframe,pivot_res_timeframe,pivot_at_point]







[pivot_sup,pivot_res,pivot_sup_timeframe,pivot_res_timeframe,pivot_at_point] = traditional()


pd_high = request.security(syminfo.tickerid,"D",high[1])
pd_open = request.security(syminfo.tickerid,"D",open[1])
pd_close = request.security(syminfo.tickerid,"D",close[1])
pd_low = request.security(syminfo.tickerid,"D",low[1])

curr_high = request.security(syminfo.tickerid,"D",high[0])
curr_open = request.security(syminfo.tickerid,"D",open[0])
curr_close = request.security(syminfo.tickerid,"D",close[0])
curr_low = request.security(syminfo.tickerid,"D",low[0])


del_lines() // for piv and pd ohlc
del_labels()

// label.new(bar_index + bar_index_extend,curr_high,text="ch",style=label.style_none)
// label.set_textcolor(label.new(bar_index + bar_index_extend,high,text="cdh",style=label.style_label_left, color=color.new(color.white,100)), color.aqua)

// drawing pd ohlc and current ohlc
if (curr_high < pd_low) 
    line.new(bar_index - bars,pd_low,bar_index + bar_index_extend,pd_low,color = color.aqua,style=line.style_dotted)

    label.set_textcolor(label.new(bar_index + bar_index_extend,pd_low,text="pdl",style=label.style_label_left, color=color.new(color.white,100)), color.aqua)

    if show_todays_ohlc
        line.new(bar_index - bars,curr_high,bar_index + bar_index_extend,curr_high,color = color.white,style=line.style_dotted)
        line.new(bar_index - bars,curr_open,bar_index + bar_index_extend,curr_open,color = color.white,style=line.style_dotted)
        line.new(bar_index - bars,curr_low,bar_index + bar_index_extend,curr_low,color = color.white,style=line.style_dotted)

        label.set_textcolor(label.new(bar_index + bar_index_extend,curr_high,text="cdh",style=label.style_label_left, color=color.new(color.white,100)), color.white)
        label.set_textcolor(label.new(bar_index + bar_index_extend,curr_open,text="cdo",style=label.style_label_left, color=color.new(color.white,100)), color.white)
        label.set_textcolor(label.new(bar_index + bar_index_extend,curr_low,text="cdl",style=label.style_label_left, color=color.new(color.white,100)), color.white)
    
    
    if show_todays_close
        line.new(bar_index - bars,curr_close,bar_index + bar_index_extend,curr_close,color = color.white,style=line.style_dotted)

        label.set_textcolor(label.new(bar_index + bar_index_extend,curr_close,text="cdc",style=label.style_label_left, color=color.new(color.white,100)), color.white)



else if (curr_low > pd_high)
    line.new(bar_index - bars,pd_high,bar_index + bar_index_extend,pd_high,color = color.aqua,style=line.style_dotted)
    label.set_textcolor(label.new(bar_index + bar_index_extend,pd_high,text="pdh",style=label.style_label_left, color=color.new(color.white,100)), color.aqua)
    
    if show_todays_ohlc
        line.new(bar_index - bars,curr_high,bar_index + bar_index_extend,curr_high,color = color.white,style=line.style_dotted)
        line.new(bar_index - bars,curr_open,bar_index + bar_index_extend,curr_open,color = color.white,style=line.style_dotted)
        line.new(bar_index - bars,curr_low,bar_index + bar_index_extend,curr_low,color = color.white,style=line.style_dotted)

        label.set_textcolor(label.new(bar_index + bar_index_extend,curr_high,text="cdh",style=label.style_label_left, color=color.new(color.white,100)), color.white)
        label.set_textcolor(label.new(bar_index + bar_index_extend,curr_open,text="cdo",style=label.style_label_left, color=color.new(color.white,100)), color.white)
        label.set_textcolor(label.new(bar_index + bar_index_extend,curr_low,text="cdl",style=label.style_label_left, color=color.new(color.white,100)), color.white)

    
    
    if show_todays_close
        line.new(bar_index - bars,curr_close,bar_index + bar_index_extend,curr_close,color = color.white,style=line.style_dotted)
        label.set_textcolor(label.new(bar_index + bar_index_extend,curr_close,text="cdc",style=label.style_label_left, color=color.new(color.white,100)), color.white)

else
    line.new(bar_index - bars,pd_high,bar_index + bar_index_extend,pd_high,color = color.aqua,style=line.style_dotted)
    line.new(bar_index - bars,pd_open,bar_index + bar_index_extend,pd_open,color = color.aqua,style=line.style_dotted)
    line.new(bar_index - bars,pd_close,bar_index + bar_index_extend,pd_close,color = color.aqua,style=line.style_dotted)
    line.new(bar_index - bars,pd_low,bar_index + bar_index_extend,pd_low,color = color.aqua,style=line.style_dotted)

    label.set_textcolor(label.new(bar_index + bar_index_extend,pd_high,text="pdh",style=label.style_label_left, color=color.new(color.white,100)), color.aqua)
    label.set_textcolor(label.new(bar_index + bar_index_extend,pd_open,text="pdo",style=label.style_label_left, color=color.new(color.white,100)), color.aqua)
    label.set_textcolor(label.new(bar_index + bar_index_extend,pd_close,text="pdc",style=label.style_label_left, color=color.new(color.white,100)), color.aqua)
    label.set_textcolor(label.new(bar_index + bar_index_extend,pd_low,text="pdl",style=label.style_label_left, color=color.new(color.white,100)), color.aqua)


    if show_todays_ohlc
        line.new(bar_index - bars,curr_high,bar_index + bar_index_extend,curr_high,color = color.white,style=line.style_dotted)
        line.new(bar_index - bars,curr_open,bar_index + bar_index_extend,curr_open,color = color.white,style=line.style_dotted)
        line.new(bar_index - bars,curr_low,bar_index + bar_index_extend,curr_low,color = color.white,style=line.style_dotted)
            
        label.set_textcolor(label.new(bar_index + bar_index_extend,curr_high,text="cdh",style=label.style_label_left, color=color.new(color.white,100)), color.white)
        label.set_textcolor(label.new(bar_index + bar_index_extend,curr_open,text="cdo",style=label.style_label_left, color=color.new(color.white,100)), color.white)
        label.set_textcolor(label.new(bar_index + bar_index_extend,curr_low,text="cdl",style=label.style_label_left, color=color.new(color.white,100)), color.white)

    
    
    if show_todays_close
        line.new(bar_index - bars,curr_close,bar_index + bar_index_extend,curr_close,color = color.white,style=line.style_dotted)
        label.set_textcolor(label.new(bar_index + bar_index_extend,curr_close,text="cdc",style=label.style_label_left, color=color.new(color.white,100)), color.white)




if show_pivot
    // if dont want daily range and only want current timeframe range then comment next 2 lines
    line.new(bar_index-bars, pivot_sup, bar_index + bar_index_extend, pivot_sup,color = color.green,style=line.style_dotted)
    line.new(bar_index-bars, pivot_res, bar_index + bar_index_extend, pivot_res,color = color.green,style=line.style_dotted)
    line.new(bar_index-bars, pivot_sup_timeframe, bar_index + bar_index_extend, pivot_sup_timeframe,color = color.green,style=line.style_dotted)
    line.new(bar_index-bars, pivot_res_timeframe, bar_index + bar_index_extend, pivot_res_timeframe,color = color.green,style=line.style_dotted)


        // print(str.tostring(pivot_at_point))
    if(pivot_at_point != 0.0)
        line.new(bar_index-bars, pivot_at_point, bar_index + bar_index_extend, pivot_at_point,color = color.green,style=line.style_dotted)
else
    na

// if barstate.islast
//     traditional()