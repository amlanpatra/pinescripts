// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Amlanpatra16

//@version=5
indicator("ICMC BO with only body no wicks",overlay=true,max_bars_back=100)
recent_bars = input.int(title="Recent Bars",defval=80,minval=1)
show_breakout_label = input.bool(true, "Show Breakout Label")
support_color = input.color(color.white,"Support Colour")
resistance_color = input.color(color.white,"Resistance Colour")
del_prev_lines = input.bool(false, "Delete Previous Lines")
line_width = 1

body_support(x) =>
    open[x] <= close[x] ? open[x] : close[x]
body_resistance(x) =>
    open[x] > close[x] ? open[x] : close[x]
// for_loop_end = 1
// if show_breakout_label
//     for_loop_end := 0
resistance_ic = high
support_ic = low
start_idx = 0

ic(idx) =>
    res = (math.abs(open[idx] - close[idx])) <= (high[idx] - low[idx])/2 ? 1 : 0
    res

isToday(i) =>
    a = ta.change(time("D"),i) ? 1 : 0
    a
noOfBars() =>
	int counter = 0
	for i = 1 to 78
        if isToday(i)
		    counter := counter + 1
            // there are 78 5 min candles in a day
	counter := 78 - counter 



print(txt) =>
    input_x_axis = input.string(title="Print label xposition",defval="Right",options=['Left', 'Center', 'Right'])
    input_y_axis = input.string(title="Print label yposition",defval="Middle",options=['Top', 'Middle', 'Bottom'])
    
    if input_y_axis == "Top"
        if input_x_axis == "Left"
            t = table.new(position.top_left, 1, 1)
            table.cell(t, 0, 0, str.tostring(txt),text_color=color.white, bgcolor = color.black)
        else if (input_x_axis == "Center")
            t = table.new(position.top_center, 1, 1)
            table.cell(t, 0, 0, str.tostring(txt),text_color=color.white, bgcolor = color.black)
        else
            t = table.new(position.top_right, 1, 1)
            table.cell(t, 0, 0, str.tostring(txt),text_color=color.white, bgcolor = color.black)


    else if input_y_axis == "Middle"
        if input_x_axis == "Left"
            t = table.new(position.middle_left, 1, 1)
            table.cell(t, 0, 0, str.tostring(txt),text_color=color.white, bgcolor = color.black)
        else if (input_x_axis == "Center")
            t = table.new(position.middle_center, 1, 1)
            table.cell(t, 0, 0, str.tostring(txt),text_color=color.white, bgcolor = color.black)
        else
            t = table.new(position.middle_right, 1, 1)
            table.cell(t, 0, 0, str.tostring(txt),text_color=color.white, bgcolor = color.black)

    if input_y_axis == "Bottom"
        if input_x_axis == "Left"
            t = table.new(position.bottom_left, 1, 1)
            table.cell(t, 0, 0, str.tostring(txt),text_color=color.white, bgcolor = color.black)
        else if (input_x_axis == "Center")
            t = table.new(position.bottom_center, 1, 1)
            table.cell(t, 0, 0, str.tostring(txt),text_color=color.white, bgcolor = color.black)
        else
            t = table.new(position.bottom_right, 1, 1)
            table.cell(t, 0, 0, str.tostring(txt),text_color=color.white, bgcolor = color.black)
del_lines() =>
    a_allLines = line.all
    if array.size(a_allLines) > 0
        for i = 0 to array.size(a_allLines) - 1
            line.delete(array.get(a_allLines, i))
del_last2lines() =>
    a_allLines = line.all
    if array.size(a_allLines) >= 2
        // for i = 0 to array.size(a_allLines) - 1
        line.delete(array.pop(a_allLines))
        line.delete(array.pop(a_allLines))


find_nextIC(idx) =>
    result = 0
    for i = idx to 1
        if(ic(i))
            result := i
            break
    result



bars = noOfBars()
if(recent_bars > bars)
    recent_bars := bars
recent_bars := find_nextIC(recent_bars)
// resistance_ic := high[recent_bars]
// support_ic := low[recent_bars]
// start_idx := recent_bars
resistance_ic := body_resistance(recent_bars)
support_ic := body_support(recent_bars)
start_idx := recent_bars

// print(str.tostring(recent_bars))



is_mom_and_outside_range = 0    // shows if it is outside ic and invalid mc range or inside

// i = recent_bars
final_str = ""

for i = recent_bars to 0
// for i = recent_bars to for_loop_end  
    if (ic(i))
        is_mom_and_outside_range := 0
        // if(high[i] >= resistance_ic)
        if(body_resistance(i) >= resistance_ic)
            resistance_ic := body_resistance(i)
        if(body_support(i) <= support_ic)
            support_ic := body_support(i)
        final_str := ""
        if del_prev_lines
            del_lines()
        line.new(bar_index - start_idx,resistance_ic, bar_index - i+1,resistance_ic,color=resistance_color,width=line_width)//,extend=extend.right)
        line.new(bar_index - start_idx,support_ic, bar_index - i+1,support_ic,color=support_color,width=line_width)//,extend=extend.right)

    else if (not (ic(i)))
        if ((close[i] <= resistance_ic) and (close[i] >= support_ic))   // mc but not breakout
            final_str := ""
            if del_prev_lines
                del_lines()
            line.new(bar_index - start_idx,resistance_ic, bar_index - i+1,resistance_ic,color=resistance_color,width=line_width)//,extend=extend.right)
            line.new(bar_index - start_idx,support_ic, bar_index - i+1,support_ic,color=support_color,width=line_width)//,extend=extend.right)


        else  // mc breakout candle
            if (((final_str == "Bo up") or (final_str == "Bo down")) or is_mom_and_outside_range == 1)
                final_str := ""
            else
                if (close[i] > resistance_ic)
                    final_str := "Body BO up"
                    is_mom_and_outside_range := 1          
                else
                    final_str := "Body BO down"
                    is_mom_and_outside_range := 1
            if(find_nextIC(i) == 0)
                continue
            else
                start_idx := find_nextIC(i)
                resistance_ic := body_resistance(start_idx)
                support_ic := body_support(start_idx)


if show_breakout_label// and (final_str != "")
    print(final_str)
else
    na


