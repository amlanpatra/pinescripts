// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Amlanpatra16

//@version=5

// this indicator includes 
// 1. GANN static version4 -> version5
// 2. Nimblr full 
// 3. Pivot points traditional


indicator("Mom Gann Combined", overlay=true)

// show_last input values
showlast_gann = input.int(title="Show last GANN",defval = 10, minval = 0)
showlast_nimblr = input.int(title="Show Last Nimblr",defval=74,minval=1)
showlast_pivot_point = input.int(title="Show Last Pivot Point",defval=10,minval=0)



// GANN static

n = 0
price = close[0]
for i = 10 to 100
    v = 4*(math.pow((i-1),2)) - 3 * (i-1) + 1
    if(v>= price)
        n := i-2
        break
n:= n+1

deg180_1 =  4*(math.pow((n-1),2)) - 3 * (n-1) + 1
deg135_1 = 4*(math.pow(n,2)) - 10*n + 7
deg90_1 = 4*(math.pow(n,2)) - 9*n + 6
deg45_1 = 4*(math.pow(n-1,2)) + 1
deg360_1 = 4*(math.pow(n,2)) - 7*n + 4
deg315_1 = 4*(math.pow(n,2)) - 6*n + 3
deg270_1 = 4*(math.pow(n-1,2)) + 3*(n-1) + 1
deg225_1 = math.pow((2*(n-1)+1),2)

n := n+1

deg180_2 =  4*(math.pow((n-1),2)) - 3 * (n-1) + 1
deg135_2 = 4*(math.pow(n,2)) - 10*n + 7
deg90_2 = 4*(math.pow(n,2)) - 9*n + 6
deg45_2 = 4*(math.pow(n-1,2)) + 1
deg360_2 = 4*(math.pow(n,2)) - 7*n + 4
deg315_2 = 4*(math.pow(n,2)) - 6*n + 3
deg270_2 = 4*(math.pow(n-1,2)) + 3*(n-1) + 1
deg225_2 = math.pow((2*(n-1)+1), 2)


sup = 0.0
sup := close[0] > deg180_1 ? deg180_1 : sup
sup := close[0] > deg135_1 ? deg135_1 : sup
sup := close[0] > deg90_1 ? deg90_1 : sup
sup := close[0] > deg45_1 ? deg45_1 : sup
sup := close[0] > deg360_1 ? deg360_1 : sup
sup := close[0] > deg315_1 ? deg315_1 : sup
sup := close[0] > deg270_1 ? deg270_1 : sup
sup := close[0] > deg225_1 ? deg225_1 : sup
sup := close[0] > deg180_2 ? deg180_2 : sup
sup := close[0] > deg135_2 ? deg135_2 : sup
sup := close[0] > deg90_2 ? deg90_2 : sup
sup := close[0] > deg45_2 ? deg45_2 : sup
sup := close[0] > deg360_2 ? deg360_2 : sup
sup := close[0] > deg315_2 ? deg315_2 : sup
sup := close[0] > deg270_2 ? deg270_2 : sup
sup := close[0] > deg225_2 ? deg225_2 : sup

res = 0.0
res := close[0] < deg225_2 ? deg225_2 : res
res := close[0] < deg270_2 ? deg270_2 : res
res := close[0] < deg315_2 ? deg315_2 : res
res := close[0] < deg360_2 ? deg360_2 : res
res := close[0] < deg45_2 ? deg45_2 : res
res := close[0] < deg90_2 ? deg90_2 : res
res := close[0] < deg135_2 ? deg135_2 : res
res := close[0] < deg180_2 ? deg180_2 : res
res := close[0] < deg225_1 ? deg225_1 : res
res := close[0] < deg270_1 ? deg270_1 : res
res := close[0] < deg315_1 ? deg315_1 : res
res := close[0] < deg360_1 ? deg360_1 : res
res := close[0] < deg45_1 ? deg45_1 : res
res := close[0] < deg90_1 ? deg90_1 : res
res := close[0] < deg135_1 ? deg135_1 : res
res := close[0] < deg180_1 ? deg180_1 : res

plot(sup ,color=color.new(#E7BB0D,10),style=plot.style_circles,show_last= showlast_gann)
plot(res ,color=color.new(#E7BB0D,10),style=plot.style_circles,show_last= showlast_gann)








// Nimblr full 
mom_up(a) => ((close[a] - open[a])*2) > (high[a] - low[a]) ? 1 : 0
mom_down(a) => ((open[a] - close[a])*2) > (high[a] - low[a]) ? 1 : 0
indecisive_buy_candle(a) => (((close[a] - open[a]) > 0) ? (((close[a] - open[a]) < ((high[a] - low[a])* 0.5)) ? (((open[a] - low[a]) > (high[a] - close[a])) ? 1 : 0) : 0) : 0)
indecisive_sell_candle(a) => (((open[a] - close[a]) > 0) ? ((open[a] - close[a]) < ((high[a] - low[a])* 0.5) ? ((high[a] - open[a]) > (close[a] - low[a])) ? 1 : 0 : 0) : 0)

plotshape(mom_up(0),title= "Bull Mom", style=shape.labelup, color=color.lime,location=location.belowbar, show_last=showlast_nimblr)
plotshape(mom_down(0),title= "Bear Mom", style=shape.labeldown, color=color.orange,location=location.abovebar,show_last=showlast_nimblr)
plotshape(indecisive_buy_candle(0),title= "Bull Indecisive", style=shape.circle, color=color.white,location=location.belowbar,show_last=showlast_nimblr)
plotshape(indecisive_sell_candle(0),title= "Bear Indecisive", style=shape.circle, color=color.white,location=location.abovebar,show_last=showlast_nimblr)







// traditional fibonacci
traditional_pivot_points() =>
    h = request.security(syminfo.ticker, "D", high[1])
    l = request.security(syminfo.ticker, "D", low[1])
    c = request.security(syminfo.ticker, "D", close[1])

    pivotX_Median = (h + l + c) / 3
    // print(str.tostring(h))
    p = math.round(pivotX_Median,2)
    r1 = math.round(pivotX_Median * 2 - l,2)
    s1 = math.round(pivotX_Median * 2 - h,2)
    r2 = math.round(pivotX_Median + 1 * (h - l),2)
    s2 = math.round(pivotX_Median - 1 * (h - l),2)
    r3 = math.round(pivotX_Median * 2 + (h - 2 * l),2)
    s3 = math.round(pivotX_Median * 2 - (2 * h - l),2)
    r4 = math.round(pivotX_Median * 3 + (h - 3 * l),2)
    s4 = math.round(pivotX_Median * 3 - (3 * h - l),2)
    r5 = math.round(pivotX_Median * 4 + (h - 4 * l),2)
    s5 = math.round(pivotX_Median * 4 - (4 * h - l),2)
    // [p,r1,s1,r2,s2,r3,s3,r4,s4,r5,s5]  This is the return to get all values




    // we will return the 3 values up and down of return close
    close_0 = close[0]
    arr = array.new_float()
    array.push(arr,p)
    array.push(arr,r1)
    array.push(arr,s1)
    array.push(arr,r2)
    array.push(arr,s2)
    array.push(arr,r3)    
    array.push(arr,r4)
    array.push(arr,s4)
    array.push(arr,r5)
    array.push(arr,s5)

    array.sort(arr, order.ascending)

    for i in arr
        if(i == close_0)
            close_0 := i
            break

    pivot_up = 0.0
    pivot_down = 0.0
    pivot_up := (close_0 < (array.size(arr) - 1)) ? (close_0 + 1) : r5
    pivot_down := (close_0 > 0) ? (close_0 - 1) : s5

    [pivot_up, pivot_down]

[pivot_up, pivot_down] = traditional_pivot_points()
// plot(pivot_up ,color=color.white,style=plot.style_cross,show_last= showlast_pivot_point)
// plot(pivot_down ,color=color.white,style=plot.style_cross,show_last= showlast_pivot_point)
