// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Amlanpatra16

//@version=5
strategy("test Strategy", overlay=true, margin_long=100, margin_short=100)
// indicator("test Strategy", overlay=true)
rcnt_bars = input.int(title="Recent Bars",defval=80,minval=1)




print(txt) =>
    input_x_axis = input.string(title="Print label position",defval="Right",options=['Left', 'Center', 'Right'])
    if input_x_axis == "Left"
        t = table.new(position.middle_left, 1, 1)
        table.cell(t, 0, 0, str.tostring(txt),text_color=color.white, bgcolor = color.black)
    else if (input_x_axis == "Center")
        t = table.new(position.middle_center, 1, 1)
        table.cell(t, 0, 0, str.tostring(txt),text_color=color.white, bgcolor = color.black)
    else
        t = table.new(position.middle_right, 1, 1)
        table.cell(t, 0, 0, str.tostring(txt),text_color=color.white, bgcolor = color.black)





resistance_ic = high
support_ic = low
start_idx = 0

ic(idx) =>
    res = (math.abs(open[idx] - close[idx])) <= (high[idx] - low[idx])/2 ? 1 : 0
    res

isToday(i) =>
    a = ta.change(time("D"),i) ? 1 : 0
    a
noOfBars() =>
	int counter = 0
	for i = 1 to 78
        if isToday(i)
		    counter := counter + 1
            // there are 78 5 min candles in a day
	counter := 78 - counter 



del_lines() =>
    a_allLines = line.all
    if array.size(a_allLines) > 0
        for i = 0 to array.size(a_allLines) - 1
            line.delete(array.get(a_allLines, i))
del_last2lines() =>
    a_allLines = line.all
    if array.size(a_allLines) >= 2
        // for i = 0 to array.size(a_allLines) - 1
        line.delete(array.pop(a_allLines))
        line.delete(array.pop(a_allLines))


find_nextIC(idx) =>
    result = 0
    for i = idx to 1
        if(ic(i))
            result := i
            break
    result




breakout_screener() =>
    bars = noOfBars()
    is_mom_and_outside_range = 0 
    recent_bars = 0
    if(rcnt_bars > bars)
        recent_bars := bars
    recent_bars := find_nextIC(recent_bars)
    resistance_ic = high[recent_bars]
    support_ic = low[recent_bars]
    start_idx = recent_bars

    final_breakout = 0
    breakout_price = 0.0
    sl_price = 0.0

    for i = recent_bars to 0
    // for i = recent_bars to 0
        if (ic(i))
            is_mom_and_outside_range := 0
            if(high[i] >= resistance_ic)
                resistance_ic := high[i]
            if(low[i] <= support_ic)
                support_ic := low[i]
            final_breakout := 0
        else if (not (ic(i)))
            if ((close[i] <= resistance_ic) and (close[i] >= support_ic))   // mc but not breakout
                final_breakout := 0
                // continue
            else  // mc breakout candle
                if ((final_breakout == 1) or is_mom_and_outside_range == 1)
                    final_breakout := 0
                else
                    // final_breakout := 1
                    is_mom_and_outside_range := 1
                    if (close[i] > resistance_ic)
                        final_breakout := 1
                        breakout_price := resistance_ic
                        sl_price := support_ic
                    else if (close[i] < support_ic)
                        final_breakout := -1
                        breakout_price := support_ic
                        sl_price := resistance_ic

                if(find_nextIC(i) == 0)
                    continue
                else
                    start_idx := find_nextIC(i)
                    resistance_ic := high[start_idx]
                    support_ic := low[start_idx]

    [final_breakout,breakout_price,sl_price]  // return 1 if breakout, 0 if no breakout
























































[final_breakout,breakout_price,sl_price] = breakout_screener()



// // This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// // © Amlanpatra16
// print(str.tostring(breakout_screener()))

// buy trade 
// if (breakout_screener() == 1)
//     strategy.entry("Buy", strategy.long,10)
//     strategy.exit("Buy exit","Buy",profit=10,loss=20)


// sell trade
if (final_breakout == -1)
    sell_entry_price = breakout_price-(breakout_price*0.001)
    stop_loss_price = sl_price+(sl_price*0.001)
    strategy.entry("Sell", strategy.short,10,limit=sell_entry_price,stop=stop_loss_price)
    strategy.exit("Sell exit","Sell",profit=3,trail_price=3)//,loss=5)


// strategy.entry(id, direction, qty, limit, stop, oca_name, oca_type, comment, when, alert_message) 
// strategy.exit(id, from_entry, qty, qty_percent, profit, limit, loss, stop, trail_price, trail_points, trail_offset, oca_name, comment, when, alert_message)
// points to be improved on
// 1. buy/sell only far from vwap
// 2. 



